package gui;

import java.io.IOException;
import java.net.URL;
import java.util.ResourceBundle;

import domein.controllers.AangemeldeGebruikerController;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.layout.AnchorPane;
import javafx.stage.Stage;

public class DashboardSchermController extends AnchorPane implements Initializable  {
	@FXML
	private Button btnAfmelden;
	@FXML
	private Label lblWelkom;
	@FXML
	private Button btnOpenstaandeTickets;
	@FXML
	private Button btnAfgehandeldeTickets;
	@FXML
	private Button btnStatistieken;
	@FXML
	private Button btnKnowledgeBaseBeheren;
	@FXML
	private Button btnNieuwTicketAanmaken;
	@FXML
	private Button btnKlantenBeheren;
	@FXML
	private Button btnWerknemersBeheren;
	
	private LoginSchermController parent;
	
	private AangemeldeGebruikerController ac;

	public DashboardSchermController(LoginSchermController loginSchermController, AangemeldeGebruikerController ac) {
		this.parent= loginSchermController;
		this.ac = ac;
		try {
			FXMLLoader loader = new FXMLLoader(getClass().getResource("DashboardScherm.fxml"));
			loader.setRoot(this);
			loader.setController(this);
			loader.load();

			
		} catch (IOException ex) {
			throw new RuntimeException(ex);
		}
	}

	// Event Listener on Button[#btnAfmelden].onAction
	@FXML
	public void btnAfmeldenOnAction(ActionEvent event) {
		parent.lg.meldAf();
		Stage stage = (Stage) (getScene().getWindow());
		stage.setScene(this.parent.getScene());
	}
	// Event Listener on Button[#btnOpenstaandeTickets].onAction
	@FXML
	public void btnOpenstaandeTicketsOnAction(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Button[#btnAfgehandeldeTickets].onAction
	@FXML
	public void btnAfgehandeldeTicketsOnAction(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Button[#btnStatistieken].onAction
	@FXML
	public void btnStatistiekenOnAction(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Button[#btnKnowledgeBaseBeheren].onAction
	@FXML
	public void btnKnowledgeBaseBeherenOnAction(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Button[#btnNieuwTicketAanmaken].onAction
	@FXML
	public void btnNieuwTicketAanmakenOnAction(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Button[#btnKlantenBeheren].onAction
	@FXML
	public void btnKlantenBeherenOnAction(ActionEvent event) {
		KlantenBeherenSchermController kbsc = new KlantenBeherenSchermController(this, this.ac);
				
		Scene scene = new Scene(kbsc);
		Stage stage = (Stage) this.getScene().getWindow();
		stage.setScene(scene);
		stage.show();	
	}
			
			
	// Event Listener on Button[#btnWerknemersBeheren].onAction
	@FXML
	public void btnWerknemersBeherenOnAction(ActionEvent event) {
		WerknemersBeherenSchermController wbsc = new WerknemersBeherenSchermController(this, this.ac);
		
		Scene scene = new Scene(wbsc);
		Stage stage = (Stage) this.getScene().getWindow();
		stage.setScene(scene);
		stage.show();	}
	
	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		welcomeMessage();
		managePermissions();
	}
	
	private void welcomeMessage()  {
		this.lblWelkom.setText(String.format("Welkom %s %s!", ac.geefAangemeldeGebruikerType(), parent.lg.geefNaamEnVoornaamAangemeldeGebruiker()));
	}

	private void managePermissions() {
		switch(ac.geefAangemeldeGebruikerType()) {
			case Administrator -> {
				btnKlantenBeheren.setDisable(false);
				btnWerknemersBeheren.setDisable(false);
				btnKlantenBeheren.setVisible(true);
				btnWerknemersBeheren.setVisible(true);
			}
			case Technieker -> {
				btnOpenstaandeTickets.setDisable(false);
				btnAfgehandeldeTickets.setDisable(false);
				btnStatistieken.setDisable(false);
				btnKnowledgeBaseBeheren.setDisable(false);
				btnOpenstaandeTickets.setVisible(true);
				btnAfgehandeldeTickets.setVisible(true);
				btnStatistieken.setVisible(true);
				btnKnowledgeBaseBeheren.setVisible(true);		
						}
			case SupportManager -> {
				btnOpenstaandeTickets.setDisable(false);
				btnAfgehandeldeTickets.setDisable(false);
				btnStatistieken.setDisable(false);
				btnKnowledgeBaseBeheren.setDisable(false);
				btnNieuwTicketAanmaken.setDisable(false);
				btnOpenstaandeTickets.setVisible(true);
				btnAfgehandeldeTickets.setVisible(true);
				btnStatistieken.setVisible(true);
				btnKnowledgeBaseBeheren.setVisible(true);
				btnNieuwTicketAanmaken.setVisible(true);
			}
			default -> {
				
			}
		}
		
	}


}
